//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "UFPrincipal.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
//Auxiliares

bool esPrimo(Cardinal num){
Byte i,c=0;
	for (i=1; i <= num; i++) {
		if (num%i==0)
			c++;
	}
	return (c>2) ? false : true;
}


//Algoritmos Numericos
Byte sumadig(Cardinal num){
	return (num==0) ? 0 : (num%10) + sumadig(num/10);
}

Byte sumarPar(Cardinal num){
Byte dig;
	if(num>0){
		dig=num%10;
		num = sumarPar(num/10);
			if(dig%2==0) num+=dig;
	}
	return num;
}

Byte sumarImpar(Cardinal num){
Byte dig;
	if(num>0){
		dig = num%10;
		num = sumarImpar(num/10);
			if(dig%2!=0) num+=dig;
	}
	return num;
}

Byte sumarPrimos(Cardinal num){
Byte dig;
	if (num>0) {
		dig = num%10;
		num = sumarPrimos(num/10);
			if (esPrimo(dig)) num += dig;
	}
	return num;
}


Byte cantDig(Cardinal num){
Byte contador;
	if(num<10) contador = 1;
	else {
		contador = cantDig(num/10);
			contador++;
    }
	return contador;
}

Byte contarPar(Cardinal num){
Byte contador;
	if (num<10)
		contador = (num%2==0) ? 1 : 0;
	 else {
		contador = contarPar(num/10);
			if((num%10)%2==0 && (num%10)!=0  ) contador++;
	}
	return contador;
}

Byte contarImpar(Cardinal num){
Byte contador;
	if(num<10){
		contador = (num%2!=0) ? 1 : 0;
	}else{
		contador = contarImpar(num/10);
			if((num%10)%2!=0 && (num%10)!=0  ) contador++;
	}
	return contador;
}

Byte contarPrimos(Cardinal num){
Byte contador,dig;
	if (num<10)
		contador = (esPrimo(num)) ? 1 : 0;
	else {
		dig = num%10;
		contador = contarPrimos(num/10);
			if (esPrimo(dig)) contador++;
	}
	return contador;
}

Byte digMayor(Cardinal num){
Byte mayor;
	if(num<10)
		mayor=num;
	else{
		mayor = digMayor(num/10);
			if (num%10>mayor) mayor=num%10;
	}
 return mayor;
}

Byte digMenor(Cardinal num){
Byte menor;
	if (num<10)
		menor=num;
	else{
		menor = digMenor(num/10);
			if (num%10<menor) menor = num%10;
	}
	return menor;
}

void elimDigPar(Cardinal &num){
Byte dig;
	if (num>0) {
		dig = num%10;
		num = num/10;
		elimDigPar(num);
			if (dig%2!=0) num = num * 10 + dig;
	}
}

void elimDigImpar(Cardinal &num){
Byte dig;
	if (num>0) {
		dig = num%10;
		num = num/10;
		elimDigImpar(num);
			if ((dig%2==0) && (dig!=0) ) num = num * 10 + dig;
	}
}

void moverDigMayorFin(Cardinal &num){
Byte dig;
	if (num>9) {
		dig = num%10;
		num = num/10;
			moverDigMayorFin(num);
			if (num%10>dig) {
				Byte aux = num%10;
				num = num / 10;
				num = (num * 10 + dig) * 10 + aux;
			} else
				num = num * 10 + dig;
	}
}

void moverDigMenorFin(Cardinal &num){
Byte dig;
	if (num>9) {
		dig=num%10;
		num=num/10;
		moverDigMenorFin(num);
			if (num%10<dig) {
				Byte aux = num%10;
				num = num/10;
				num = (num*10 + dig) * 10 + aux;
			} else
				num = num * 10 + dig;
	}
}

void ordenarAscendente(Cardinal &num){
Byte dig;
	if (num>9) {
		moverDigMayorFin(num);
		dig = num%10;
		num = num/10;
		ordenarAscendente(num);
            num = num * 10 + dig;
	}
}

void ordenarDescendente(Cardinal &num){
Byte dig;
	if (num>9) {
		moverDigMenorFin(num);
		dig = num%10;
		num = num/10;
		ordenarDescendente(num);
			num = num * 10 + dig;
	}
}

Byte sumaPosImpar(Cardinal num, Byte pos){
Byte dig;
	if (num>0) {
		dig = num%10;
		pos++;
		num = sumaPosImpar(num/10,pos);
			if (pos%2!=0) {
				num = num + dig;
			}
	}
	return num;
}

Cardinal factorial(Cardinal num){
	return (num>1) ? num * factorial(num-1) : 1;
}


//Algoritos con Cadenas



//Algoritmos con Vectores

//Algoritmos con Matrices


//---------------------------------------------------------------------------

void __fastcall TForm1::SumaDigClick(TObject *Sender)
{
	Cardinal num = StrToInt(Ed1->Text);
	Byte res = sumadig(num);
	ShowMessage(res);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::ContarDigitosPares1Click(TObject *Sender)
{
	Cardinal num = StrToInt(Ed1->Text);
	Byte res = contarPar(num);
	ShowMessage(res);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::SumarDigitosPares1Click(TObject *Sender)
{
	Cardinal num = StrToInt(Ed1->Text);
	Byte res = sumarPar(num);
	ShowMessage(res);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::SumarDigitosImpares1Click(TObject *Sender)
{
    Cardinal num = StrToInt(Ed1->Text);
	Byte res = sumarImpar(num);
	ShowMessage(res);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::EsPrimo1Click(TObject *Sender)
{
	Cardinal num = StrToInt(Ed1->Text);
	if (esPrimo(num)) {
		ShowMessage("Es Primo");
	} else {
		ShowMessage("No es Primo");
    }
}
//---------------------------------------------------------------------------

void __fastcall TForm1::CantidadDigitosClick(TObject *Sender)
{
	Cardinal num=StrToInt(Ed1->Text);
	Byte res = cantDig(num);
	ShowMessage(res);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::ContarDigitosImpares1Click(TObject *Sender)
{
	Cardinal num = StrToInt(Ed1->Text);
	Byte res = contarImpar(num);
	ShowMessage(res);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::RetornarDigitoMayor1Click(TObject *Sender)
{
    Cardinal num = StrToInt(Ed1->Text);
	Byte res = digMayor(num);
	ShowMessage(res);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::SumarDigitosPrimos1Click(TObject *Sender)
{
	Cardinal num = StrToInt(Ed1->Text);
	Byte res = sumarPrimos(num);
	ShowMessage(res);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::ContarDigitosPrimos1Click(TObject *Sender)
{
	Cardinal num = StrToInt(Ed1->Text);
	Byte res = contarPrimos(num);
	ShowMessage(res);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::RetornarDigitoMenor1Click(TObject *Sender)
{
	Cardinal num = StrToInt(Ed1->Text);
	Byte res = digMenor(num);
	ShowMessage(res);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::EliminarDigitosPares1Click(TObject *Sender)
{
	Cardinal num = StrToInt(Ed1->Text);
	elimDigPar(num);
	ShowMessage(num);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::EliminarDigitosImpares1Click(TObject *Sender)
{
	Cardinal num = StrToInt(Ed1->Text);
	elimDigImpar(num);
	ShowMessage(num);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::MoverDigMayorFinalClick(TObject *Sender)
{
	Cardinal num = StrToInt(Ed1->Text);
	moverDigMayorFin(num);
	ShowMessage(num);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::MoverDigitoMenoralFinal1Click(TObject *Sender)
{
	Cardinal num = StrToInt(Ed1->Text);
	moverDigMenorFin(num);
	ShowMessage(num);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::OrdenarDigitosAscendente1Click(TObject *Sender)
{
	Cardinal num = StrToInt(Ed1->Text);
	ordenarAscendente(num);
	ShowMessage(num);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::OrdenarDigitosDescendente1Click(TObject *Sender)
{
    Cardinal num = StrToInt(Ed1->Text);
	ordenarDescendente(num);
	ShowMessage(num);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::CalcularSumadeDigitosenPosicionImpar1Click(TObject *Sender)

{
	Cardinal num = StrToInt(Ed1->Text);
	Byte res = sumaPosImpar(num, 0);
	ShowMessage(res);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Factorial1Click(TObject *Sender)
{
	Cardinal num = StrToInt(Ed1->Text);
	Cardinal res = factorial(num);
	ShowMessage(res);
}
//---------------------------------------------------------------------------

